name: GitHub-Actions-Terraform-Azure-Pipeline

# on:
#   push:
#     branches:
#     - main
#   pull_request:
#     branches:
#     - main

# manual trigger
on: workflow_dispatch

#Special permissions required for OIDC authentication
permissions:
  id-token: write
  contents: read
  pull-requests: write

env:
  ARM_CLIENT_ID: ${{ secrets.AZURE_AD_CLIENT_ID }}
  ARM_CLIENT_SECRET: ${{ secrets.AZURE_AD_CLIENT_SECRET }}
  ARM_TENANT_ID: ${{ secrets.AZURE_AD_TENANT_ID }}
  ARM_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

jobs:
  build:
    name: 'Terraform Init, Plan and Apply'
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3
  
      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_wrapper: false

      - name: Use Development Environment Variables
        run: |
          set +x
          echo "ARM_SUBSCRIPTION_ID=${{ secrets.AZURE_SUBSCRIPTION_ID }}" >> $GITHUB_ENV
          echo "ARM_TENANT_ID=${{ secrets.AZURE_AD_TENANT_ID }}" >> $GITHUB_ENV
          echo "ARM_CLIENT_ID=${{ secrets.AZURE_AD_CLIENT_ID }}" >> $GITHUB_ENV
          echo "ARM_CLIENT_SECRET=${{ secrets.AZURE_AD_CLIENT_SECRET }}" >> $GITHUB_ENV
          set -x
  
      - name: Terraform Init
        id: init
        run: terraform init -upgrade

      - name: Terraform Format
        id: fmt
        run: terraform fmt -recursive

      - name: Terraform Validate
        id: validate
        run: terraform validate
  
      # - name: Plan Terraform
      #   run: terraform plan -out=tfplan

      - name: Terraform plan and Checkov pre requisites
        id: plan
        run: |
          terraform plan -no-color -var-file=terraform.tfvars -input=false --out tfplan.binary
          terraform show -json tfplan.binary > tfplan.json

      #==================================================
      # Install Checkov                    
      #==================================================
      - name: Install Checkov
        id: install-checkov
        run: pip install checkov
      
      #==================================================
      # Checkov Analysis                    
      #==================================================
      - name: Checkov Analysis
        id: checkov
        # if: github.event_name == 'pull_request'
        run: checkov -f tfplan.json --soft-fail

      #==================================================
      # Terraform Format and Style              
      #==================================================
      - name: Terraform Format and Style
        uses: actions/github-script@v6
        # if: github.event_name == 'pull_request'
        env:
          PLAN: "terraform\n${{ steps.plan.outputs.stdout }}"
          CHECKOV: "Checkov\n${{ steps.checkov.outputs.stdout }}"
        with:
          script: |
            const output = `#### Terraform Format and Style üñå\`${{ steps.fmt.outcome }}\`
            #### Terraform Initialization ‚öôÔ∏è\`${{ steps.init.outcome }}\`
            #### Terraform Plan üìñ\`${{ steps.plan.outcome }}\`
            #### Terraform Validation ü§ñ\`${{ steps.validate.outcome }}\`
            <details><summary>Show Plan and Checkov Summary</summary>
            \`\`\`\n
            ${process.env.PLAN}
            \`\`\`
            </details>
            *Pushed by: @${{ github.actor }}, Action: \`${{ github.event_name }}\`*`;
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: output
            })
      #==================================================
      # Terraform Plan Status
      #==================================================
      - name: Exit if Plan fails
        if: steps.plan.outcome == 'failure'
        run: exit 1
  
      #==================================================
      # Terraform Apply
      #==================================================
      - name: Apply Terraform
        run: terraform apply -auto-approve -var-file=terraform.tfvars

      # - name: Destroy Terraform
      #   run: terraform destroy -auto-approve
